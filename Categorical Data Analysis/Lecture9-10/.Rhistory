knitr::opts_chunk$set(echo = TRUE)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
View(MBTI)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
head(MBTI)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
sample(MBTI)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
sample(MBTI, 10)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
sample(MBTI, size=10)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
sample(MBTI)
MBTI <- read.table("MBTI_Ex7_3.dat", header=TRUE)
MBTI.fit <- glm(y ~ EI + SN + TF + JP,
family = "Binomial",
data = MBTI)
MBTI.fit <- glm(y ~ EI + SN + TF + JP,
family = "binomial",
data = MBTI)
summary(MBTI.fit)
MBTI.fit <- glm(y ~ EI + SN + TF + JP,
family = "logit",
data = MBTI)
MBTI.fit <- glm(y ~ EI + SN + TF + JP,
family = binomial(link="logit"),
data = MBTI)
summary(MBTI.fit)
MBTI.fit <- glm(y ~ factor(EI) + factor(SN) + factor(TF) + factor(JP),
family = binomial(link="logit"),
data = MBTI)
summary(MBTI.fit)
data = MBTI)
MBTI.fit <- glm(y ~ factor(EI, levels=levels(EI)) + factor(SN, levels=levels(sn)) + factor(TF, levels=levels(TF)) + factor(JP, levels=levels(JP)),
family = binomial(link="logit"),
data = MBTI)
summary(MBTI.fit)
```{r}
```{r}
predicted_probability <- predict(M1.fit,
newdata = data.frame(EI = "e", SN = "s", TF = "t", JP = "j"),
type = "response")
M1.fit <- glm(y ~ factor(EI) + factor(SN) + factor(TF) + factor(JP),
family = binomial(link="logit"),
data = MBTI)
summary(M1.fit)
predicted_probability <- predict(M1.fit,
newdata = data.frame(EI = "e", SN = "s", TF = "t", JP = "j"),
type = "response")
predicted_probability
View(MBTI.fit)
View(MBTI.fit)
f.
M2.fit <- glm(y ~ factor(EI) + factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M2.fit)
anova(M1.fit, M2.fit, test = "LRT")
anova(M2.fit, M1.fit, test = "LRT")
M3.fit <- glm(y ~ factor(EI) + factor(SN) + factor(EI):factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M3.fit)
anova(M3.fit, M2.fit, test = "LRT")
M3.fit <- glm(y ~ factor(EI) + factor(SN) + factor(EI):factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M3.fit)
anova(M2.fit, M3.fit, test = "LRT")
M3.fit <- glm(y ~ factor(EI) + factor(SN) + factor(EI):factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M3.fit)
anova(M3.fit, M2.fit, test = "LRT")
M3.fit <- glm(y ~ factor(EI) + factor(SN) + factor(EI):factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M3.fit)
anova(M2.fit, M3.fit, test = "LRT")
M2.fit <- glm(y ~ factor(EI) + factor(SN),
family = binomial(link="logit"),
data = MBTI)
summary(M2.fit)
anova(M2.fit, M1.fit, test = "LRT")
AIC(M1.fit)
AIC(M2.fit)
# another method:
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1$df
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
attributes(loglikm1)
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1$df
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
str(loglikm1)
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
attributes(loglikm1)
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1$df
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1[df]
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1["df"]
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1[df]
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1[data[df]]
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1[data[1]]
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
loglikm1(data[1])
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
attr(loglikm1, "df")
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
-2*loglikm1+2*attr(loglikm1, "df")
AIC(M1.fit)
AIC(M2.fit)
# another method:
loglikm1 <- logLik(M1.fit)
-2*loglikm1+2*attr(loglikm1, "df")
loglikm2 <- logLik(M2.fit)
-2*loglikm2+2*attr(loglikm2, "df")
AIC(M1.fit, M2.fit)
stepAIC(M1.fit)
library(MASS)
stepAIC(M1.fit)
library(MASS)
stepAIC(M1.fit, direction="backward")
