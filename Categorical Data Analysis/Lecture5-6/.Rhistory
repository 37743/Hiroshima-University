knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
install.package(statmod)
install.packages(statmod)
library(statmod)
install.packages(statmod)
install.packages("statmod")
install.packages("glmtoolbox")
install.packages("caret")
install.packages("tidyverse")
legend("topleft",
legend = c("Scores: (0, 2, 6, 7)", "Scores: (0, 2, 4, 5)"),
col = c("blue", "orange"), pch = c(16, 17), lty = 1)
HD_text <- data.frame(Yes = c(24, 35, 21, 30),
No = c(1355, 603, 192, 224),
x_text = c(0, 2, 4, 5))
fit_new <- glm(cbind(Yes, No) ~ x_new,
family = binomial(link = "logit"),
data = HD_new)
HD_text <- data.frame(Yes = c(24, 35, 21, 30),
No = c(1355, 603, 192, 224),
x_text = c(0, 2, 4, 5))
```{r}
HD_new <- data.frame(Yes = c(24, 35, 21, 30),
No = c(1355, 603, 192, 224),
x_new = c(0, 2, 6, 7))
fit_new <- glm(cbind(Yes, No) ~ x_new,
family = binomial(link = "logit"),
data = HD_new)
fit_text <- glm(cbind(Yes, No) ~ x_text,
family = binomial(link = "logit"),
data = HD_text)
```{r}
```{r}
HD_new$fitted_new <- predict(fit_new, type = "response")
HD_text$fitted_text <- predict(fit_text, type = "response")
plot(HD_new$x_new, HD_new$fitted_new,
type = "b", col = "blue", pch = 16, ylim = c(0, 0.15),
xlab = "Snoring Scores", ylab = "pi",
main = "Comparison of Logistic Regression")
lines(HD_text$x_text, HD_text$fitted_text,
type = "b", col = "orange", pch = 17)
legend("topleft",
legend = c("Scores: (0, 2, 6, 7)", "Scores: (0, 2, 4, 5)"),
col = c("blue", "orange"), pch = c(16, 17), lty = 1)
(b)
treat.df <- data.frame(
A = c(8,7,6,6,3,4,7,2,3,4),
B = c(9,9,8,14,8,13,11,5,7,6)
)
glm(A ~ B,
family = poisson(link = "log"),
data = treat.df
)
summary(treat.fit)
treat.df <- data.frame(
A = c(8,7,6,6,3,4,7,2,3,4),
B = c(9,9,8,14,8,13,11,5,7,6)
)
treat.fit <- glm(A ~ B,
family = poisson(link = "log"),
data = treat.df
)
summary(treat.fit)
View(treat.fit)
confint.default(treat.fit)
intercept.fit <- glm(cbind(A, B) ~ 1,
family = binomial(link = "logit"),
data = treat.df
)
logLik(intercept.fit)
treat.df <- data.frame(
A = c(8,7,6,6,3,4,7,2,3,4),
B = c(9,9,8,14,8,13,11,5,7,6)
)
treat.fit <- glm(A ~ B,
family = poisson(link = "log"),
data = treat.df
)
summary(treat.fit)
```{r}
```{r}
treat.df <- data.frame(
A = c(8,7,6,6,3,4,7,2,3,4),
B = c(9,9,8,14,8,13,11,5,7,6)
)
treat.fit <- glm(A ~ B,
family = poisson(link = "log"),
data = treat.df
)
summary(treat.fit)
intercept.fit <- glm(cbind(A, B),
family = binomial(link = "logit"),
data = treat.df
)
logLik(treat.fit)
logLik(intercept.fit)
logLik(treat.fit)
logLik(intercept.fit)
logLik(treat.fit)
2*(-20.1716-(-16.80199))
treat.df <- data.frame(
treatment <- c(rep(0, 10), rep(1, 10))
imperfections <- c(8, 7, 6, 6, 3, 4, 7, 2, 3, 4, 9, 9, 8, 14, 8, 13, 11, 5, 7, 6)
treat.df <- data.frame(
treatment <- c(rep(0, 10), rep(1, 10)),
imperfections <- c(8, 7, 6, 6, 3, 4, 7, 2, 3, 4, 9, 9, 8, 14, 8, 13, 11, 5, 7, 6)
)
treat.fit <- glm(imperfections ~ treatment,
family = poisson(link = "log"),
data = treat.df
)
summary(treat.fit)
confint.default(treat.fit)
logLik(intercept.fit)
```{r}
intercept.fit <- glm(cbind(A, B) ~ 1,
family = binomial(link = "logit"),
data = treat.df
)
intercept.fit <- glm(cbind(imperfections, treatment) ~ 1,
family = binomial(link = "logit"),
data = treat.df
)
logLik(intercept.fit)
intercept.fit <- glm(imperfections ~ 1,
family = binomial(link = "logit"),
data = treat.df
)
intercept.fit <- glm(imperfections ~ 1,
family = poisson(link = "log"),
data = treat.df
)
logLik(intercept.fit)
logLik(treat.fit)
deviance_value <- 2 * (logLik(treat.fit)[1] - logLik(intercept.fit)[1])
deviance_value
logLik(treat.fit)
logLik(treat.fit)
deviance_value <- 2 * (logLik(treat.fit)[1] - logLik(intercept.fit)[1])
deviance_value
p_value <- pchisq(deviance_stat, df = 1, lower.tail = FALSE)
logLik(treat.fit)
deviance <- 2 * (logLik(treat.fit)[1] - logLik(intercept.fit)[1])
deviance
p_value <- pchisq(deviance, df = 1, lower.tail = FALSE)
p_value <- pchisq(deviance, df = 1, lower.tail = FALSE)
p_value <- pchisq(deviance, df = 1, lower.tail = FALSE)
logLik(treat.fit)
deviance <- 2 * (logLik(treat.fit)[1] - logLik(intercept.fit)[1])
deviance
p_value
drop1(treat.fit, test = "LRT")
